# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'animelistUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import main


class guiWindow(QtWidgets.QMainWindow):

    def __init__(self):

        super(guiWindow,self).__init__()
        self.setObjectName("MainWindow")
        self.resize(900,700)
        self.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.initInterface()
        self.translateUI()

    def initInterface(self):

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.resultList = QtWidgets.QListWidget(self.centralwidget)
        self.resultList.setGeometry(QtCore.QRect(20, 230, 256, 291))
        self.resultList.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.resultList.setObjectName("resultList")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 20, 221, 22))
        self.lineEdit.setObjectName("lineEdit")


        self.searchButton = QtWidgets.QPushButton(self.centralwidget)
        self.searchButton.setGeometry(QtCore.QRect(250, 20, 51, 21))
        self.searchButton.setObjectName("searchButton")
        self.searchButton.clicked.connect(self.searchButtonClick)

        self.addButton = QtWidgets.QPushButton(self.centralwidget)
        self.addButton.setGeometry(QtCore.QRect(290, 240, 93, 28))
        self.addButton.setObjectName("addButton")
        self.addButton.clicked.connect(self.addButtonClick)


        self.currList = QtWidgets.QListWidget(self.centralwidget)
        self.currList.setGeometry(QtCore.QRect(510, 230, 256, 291))
        self.currList.setObjectName("currList")

        self.resultLabel = QtWidgets.QLabel(self.centralwidget)
        self.resultLabel.setGeometry(QtCore.QRect(20, 200, 55, 16))
        self.resultLabel.setObjectName("resultLabel")

        self.clLabel = QtWidgets.QLabel(self.centralwidget)
        self.clLabel.setGeometry(QtCore.QRect(510, 200, 55, 16))
        self.clLabel.setObjectName("clLabel")

        self.deleteButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteButton.setGeometry(QtCore.QRect(780, 240, 93, 28))
        self.deleteButton.setObjectName("deleteButton")
        self.deleteButton.clicked.connect(self.deleteButtonClick)

        self.exportButton = QtWidgets.QPushButton(self.centralwidget)
        self.exportButton.setGeometry(QtCore.QRect(780, 530, 93, 28))
        self.exportButton.setObjectName("exportButton")
        self.exportButton.clicked.connect(self.exportButtonClick)

        self.fileName = QtWidgets.QLineEdit(self.centralwidget)
        self.fileName.setGeometry(QtCore.QRect(510, 530, 251, 22))
        self.fileName.setText("")
        self.fileName.setObjectName("fileName")

        self.setCentralWidget(self.centralwidget)

        self.menuBar = QtWidgets.QMenuBar(self)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 900, 26))
        self.menuBar.setObjectName("menuBar")
        self.setMenuBar(self.menuBar)

        QtCore.QMetaObject.connectSlotsByName(self)

    def translateUI(self):

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Search for anime . . ."))
        self.searchButton.setText(_translate("MainWindow", "Search"))
        self.addButton.setText(_translate("MainWindow", "Add"))
        self.resultLabel.setText(_translate("MainWindow", "Results:"))
        self.clLabel.setText(_translate("MainWindow", "List:"))
        self.deleteButton.setText(_translate("MainWindow", "Delete"))
        self.exportButton.setText(_translate("MainWindow", "Export to text"))
        self.fileName.setPlaceholderText(_translate("MainWindow", "Enter text file name here . . ."))

    def searchButtonClick(self):

        search = self.lineEdit.text()
        print(search)
        animeList = main.findByName(search)
        self.resultList.clear()
        for animeData in animeList.values():
            print(animeData)
            anime = QtWidgets.QListWidgetItem()
            anime.setText(animeData['title'])
            anime.setData(QtCore.Qt.UserRole, animeData['rating'])
            self.resultList.addItem(anime)
    

    def addButtonClick(self):

       selectedRow = self.resultList.currentRow()
       currItem = self.resultList.currentItem()
       
       if(currItem is not None):
            checkItems = self.currList.findItems(currItem.text(),QtCore.Qt.MatchExactly)
    
            if(len(checkItems) == 0):
                    print("!!")
                    selectedItem = self.resultList.takeItem(selectedRow)
                    print(selectedItem.text())
                    print(selectedItem.data(QtCore.Qt.UserRole))
                    self.currList.addItem(selectedItem)
            else:
                    message = "Can not add duplicate anime!"
                    self.errorMessage(message)
       else:
            message = "There aren't any anime to add!"
            self.errorMessage(message)

    def errorMessage(self,message):

        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Error")
        msg.setText(message)
        msg.setIcon(QtWidgets.QMessageBox.Question)
        msg.exec_()  
        
    def deleteButtonClick(self):

        selectedItem = self.currList.currentRow()
        self.currList.takeItem(selectedItem)

    def exportButtonClick(self):
        filename = self.fileName.text()
        animeList = self.currList
        if not filename or filename == "":
            self.errorMessage("Your file needs a name!")
        elif animeList.count() <= 0:
            self.errorMessage("You need anime in your list to add!")
        else:
            txtFile = (f"{filename}.txt")
            with open(txtFile, 'a') as f:
                print(animeList.count())
                for i in range(animeList.count()):
                    itemName = animeList.item(i).text()
                    itemScore = animeList.item(i).data(QtCore.Qt.UserRole)
                    print(animeList.item(i).text())
                    f.write(f"-> {itemName:<100} | Score: {itemScore}")
                    f.write("\n")
                f.close()          
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Complete")
                msg.setText(f"Anime added sucessfully to {txtFile}")
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.exec_()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = guiWindow()
    MainWindow.show()
    sys.exit(app.exec_())
